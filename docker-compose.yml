# docker-compose.yml
version: "3.1"

services:

  sep-server:
    image: stellar/anchor-platform:latest
    command: --sep-server
    container_name: sep-server
    depends_on: 
      - db
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - ./dev.env
    volumes:
      - ./config:/home
  platform-server:
    image: stellar/anchor-platform:latest
    command: --platform-server
    container_name: platform-server
    depends_on: 
      - db
    restart: always
    ports:
      - "8085:8085"
    env_file:
      - ./dev.env
    volumes:
      - ./config:/home

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${DB_PORT}:5432
    volumes:
      - ./docker-data/db:/var/lib/postgresql/data

  db:
    image: postgres:14.1-alpine
    container_name: anchor_db
    ports:
      - "5432:5432"
    env_file:
      - ./dev.env
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql


  nginx:
    image: nginx:1.11.4-alpine
    container_name: my-nginx-container
    ports:
      - "80:80"
    volumes:
      - ./config/dev.stellar.toml:/usr/share/nginx/html/dev.stellar.toml:ro
networks:
  mynetwork:
    driver: bridge






 # nodejs-app:
  #   build: .
  #   container_name: stellar
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
  #   depends_on:
  #     - postgres
  #   networks:
  #     - mynetwork

  # business-server:
  # build: .
  # ports:
  #   - "8081:8081"
  # env_file:
  #   - ./dev.env
  # depends_on:
  #   - platform-server



  # observer:
  #   image: stellar/anchor-platform:latest
  #   command: --stellar-observer
  #   env_file: 
  #     - ./dev.env
  #   volumes:
  #     - ./config:/home
  #   depends:
  #      -db
